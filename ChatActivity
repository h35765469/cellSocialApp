package com.example.user.chatsystem1.fragment;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.Environment;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.user.chatsystem1.ChatHistory.SQLite;
import com.example.user.chatsystem1.R;
import com.example.user.chatsystem1.SendFileType.FileChooser;
import com.example.user.chatsystem1.XmppConnection;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManagerListener;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smackx.ServiceDiscoveryManager;
import org.jivesoftware.smackx.filetransfer.FileTransfer;
import org.jivesoftware.smackx.filetransfer.FileTransferListener;
import org.jivesoftware.smackx.filetransfer.FileTransferManager;
import org.jivesoftware.smackx.filetransfer.FileTransferNegotiator;
import org.jivesoftware.smackx.filetransfer.FileTransferRequest;
import org.jivesoftware.smackx.filetransfer.IncomingFileTransfer;
import org.jivesoftware.smackx.filetransfer.OutgoingFileTransfer;
import org.jivesoftware.smackx.packet.StreamInitiation;


import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.jar.JarFile;


public class ChatActivity extends AppCompatActivity {
    private TextView text_chat,text_title;
    private EditText edit_chat;
    private ImageView img_send,img_sendfile;
    private Drawable img_userDrawable,img_friendDrawable,img_bombDrawable;
    private XMPPConnection connection = XmppConnection.getConnection();
    private String friend,sendMsg ,UserID , My;
    private ChatHandler handler;
    private SimpleDateFormat sf = new SimpleDateFormat("HH:mm");

    private ArrayList<HashMap<String, Object>> chatList = new ArrayList<HashMap<String,Object>>();
    String[] from = {"img","text"};
    int[] to = {R.id.img_me,R.id.text_me,R.id.img_friend,R.id.text_friend};
    int[] item_layout = {R.layout.my_message_item,R.layout.friend_message_item};
    private ListView listview_chat;
    private MyAdapter myAdapter;

    private final String DATABASE_NAME = "Mydb";
    SQLite sqlite = null;
    int messagecount = 0;

    private File[] filearray;//傳送文件要用
    FileChooser fileChooser;//呼叫選擇器的物件
    Presence pre;
    FileTransferManager transfer_getfile;

    private ArrayList<Integer> checkbomb = new ArrayList<Integer>();//檢查有哪幾行有傳送炸彈







    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);
        img_send = (ImageView) findViewById(R.id.img_send);
        img_sendfile = (ImageView)findViewById(R.id.img_sendfile);
        edit_chat = (EditText) findViewById(R.id.edit_chat);
        listview_chat = (ListView) findViewById(R.id.listview_chat);
        text_title = (TextView) findViewById(R.id.text_title);

        myAdapter = new MyAdapter(this, chatList, item_layout, from, to);

        Bundle bundle = this.getIntent().getExtras();
        friend = bundle.getString("friendname");
        UserID = bundle.getString("UserID");
        My = bundle.getString("Username");
        text_title.setText(friend);

        sqlite = new SQLite(this,DATABASE_NAME,null,3);
        //img_userDrawable = new FriendFragment().getUserImage (,connection);
        //img_friendDrawable = new FriendFragment().getUserImage( friend,connection);

        pre = connection.getRoster().getPresence(UserID);
        fileChooser = new FileChooser(this);//創建檔案選擇器的物件
        transfer_getfile = new FileTransferManager(connection);
        img_bombDrawable = getResources().getDrawable(R.drawable.boom);


        getfile();//獲取檔案

        //設置炸彈的圖案可以被點擊
        listview_chat.setAdapter(myAdapter);
        listview_chat.setOnItemClickListener(BombOnItemClick);


        //傳送檔案的按鈕
        img_sendfile.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                fileChooser.showFileChooser();
            }
        });

        //傳送訊息的按鈕
        img_send.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                sendMsg = edit_chat.getText().toString();
                if(!sendMsg.equals("")){

                    Chat chat = connection.getChatManager().createChat(UserID, null);
                    try {
                        chat.sendMessage(sendMsg);
                    } catch (XMPPException e) {
                        e.printStackTrace();
                    }

                    edit_chat.setText(null);

                    addChatToListview(0, sendMsg ,0);

                    //將ListView設置為置底顯示，自動刷新UI，使得消息即時顯示
                    listview_chat.setAdapter(myAdapter);
                    listview_chat.setSelection(myAdapter.getCount() - 1);
                    adddata(messagecount, My , friend, sendMsg);
                    messagecount++;
                }

            }
        });


        //監聽用戶收到消息
        Thread thread = new Thread(new Runnable(){
            @Override
            public void run(){
                //接收用戶傳來消息
                connection.getChatManager().addChatListener(new ChatManagerListener() {
                    @Override
                    public void chatCreated(Chat chat, boolean b) {
                        chat.addMessageListener(new MessageListener(){

                            @Override
                            public void processMessage(Chat chat , Message msg){
                                friend = msg.getFrom();
                                friend = friend.substring(0,friend.indexOf("@"));
                                android.os.Message m = new android.os.Message();
                                if(msg.getBody()!=null){
                                    Bundle b = new Bundle();
                                    b.putString("msg",msg.getBody());
                                    b.putString("friend",friend);
                                    m.setData(b);
                                    handler.sendMessage(m);
                                }
                            }
                        });
                    }
                });
            }
        });
        thread.start();
        handler = new ChatHandler();

        addChatHistoryToListview();//添加聊天紀錄
    }

    //點擊炸彈圖片(在哪幾列)的觸動事件
    AdapterView.OnItemClickListener BombOnItemClick  = new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            myAdapter.setSelectItem(checkbomb);
            myAdapter.notifyDataSetInvalidated();
        }
    };

    public class ChatHandler extends Handler {
        @Override
        public void handleMessage(android.os.Message msg) {
            super.handleMessage(msg);

            Bundle b = msg.getData();
            String ChatHandler = b.getString("msg");
            String friend = b.getString("friend");

            text_title.setText(friend);
            addChatToListview(1, ChatHandler,0);

            //将ListView设置为置底显示，自动刷新UI，使得消息及时显示
            listview_chat.setAdapter(myAdapter);
            listview_chat.setSelection(myAdapter.getCount() - 1);
            adddata(messagecount, friend, My , ChatHandler);
            messagecount++;
        }
    }

    //添加文字框框進去listview
    public void addChatToListview(int who,String chat,int mode){
        HashMap<String,Object> map = new HashMap<String,Object>();
        map.put("who", who);
        map.put("img", who==0?R.drawable.mymessage:R.drawable.friendmessage);
        map.put("chat", chat);
        map.put("mode",mode);
        chatList.add(map);
    }

    //添加檔案圖片進去listview
    public void addFileToListview(int who,int mode){
        HashMap<String,Object> map = new HashMap<String,Object>();
        map.put("who", who);
        map.put("img", who==0?R.drawable.mymessage:R.drawable.friendmessage);
        map.put("mode",mode);
        chatList.add(map);
    }

    //添加聊天紀錄到listview
    public void addChatHistoryToListview(){
        Cursor cursor = sqlite.query("select * from ChatMessage" , null);
        listview_chat.setAdapter(new ChatHistory_baseAdapter(this,cursor));
    }

    public class MyAdapter extends BaseAdapter {
        Context context;
        ArrayList<HashMap<String,Object>> chatList= null;
        int[] layout;
        String[] from;
        int[] to;
        LayoutInflater listcontainer;
        ArrayList<Integer>BombSelectItem;

        public MyAdapter(Context context,
                         ArrayList<HashMap<String, Object>> chatList, int[] layout,
                         String[] from, int[] to){

            super();
            this.context = context;
            listcontainer = LayoutInflater.from(context);
            this.chatList = chatList;
            this.layout = layout;
            this.from = from;
            this.to = to;
        }

        @Override
        public int getCount() {
            return chatList.size();
        }

        @Override
        public Object getItem(int arg0) {
            return null;
        }

        @Override
        public long getItemId(int ItemId) {
            return ItemId;
        }


        @Override
        public View getView(int item, View view, ViewGroup parent) {
            //獲取當前who is call
            int who = (Integer)chatList.get(item).get("who");
            int mode = (Integer)chatList.get(item).get("mode");
            if(mode == 0){
                String msg = (String)chatList.get(item).get("chat");
                //根據who设置當前的布局和文本，0為自己發送的布局，1為好友發送的布局
                if(who==0)
                {
                    view=listcontainer.inflate(R.layout.my_message_item, null);
                    ((TextView)view.findViewById(R.id.text_me)).setText(msg);
                    ((ImageView)view.findViewById(R.id.img_me)).setImageDrawable(img_userDrawable);
                }
                else
                {
                    view=listcontainer.inflate(R.layout.friend_message_item, null);
                    ((TextView)view.findViewById(R.id.text_friend)).setText(msg);
                    ((ImageView)view.findViewById(R.id.img_friend)).setImageDrawable(img_friendDrawable);
                }
            }else{
                //根據who设置當前的布局和文本，0為自己發送的布局，1為好友發送的布局
                if(who==0)
                {
                    view=listcontainer.inflate(R.layout.my_bomb_item, null);
                    ((ImageView)view.findViewById(R.id.img_bomb_me)).setImageDrawable(img_userDrawable);
                    ((ImageView)view.findViewById(R.id.my_bombimage)).setImageDrawable(img_bombDrawable);
                }
                else
                {
                    view=listcontainer.inflate(R.layout.friend_bomb_item, null);
                    ((ImageView)view.findViewById(R.id.img_bomb_friend)).setImageDrawable(img_friendDrawable);
                    ((ImageView)view.findViewById(R.id.friend_bombimage)).setImageDrawable(img_bombDrawable);
                }
            }
            return view;
        }

        public void setSelectItem(ArrayList<Integer>BombSelectItem ){
            this.BombSelectItem = BombSelectItem;
        }

    }

    //獲取聊天紀錄的adapter
    public class ChatHistory_baseAdapter extends BaseAdapter{
        private static final String TAG = "CursorAdapter";
        private Context context;
        private Cursor cursor;
        private LayoutInflater inflater;
        public ChatHistory_baseAdapter(Context context , Cursor cursor){
            super();
            this.context = context;
            this.cursor = cursor;
            inflater = LayoutInflater.from(context);
        }

        @Override
        public int getCount(){
            Log.d(TAG, "Count :" + cursor.getCount()); // TODO Auto-generated method stub
            return cursor.getCount();
        }

        @Override
        public Object getItem(int position){
            Log.d(TAG, "Item :" + position); // TODO Auto-generated method stub return position
            return position;
        }

        @Override
        public long getItemId(int position){
            Log.d(TAG, "ItemId :" + position);
            return position;
        }

        @Override
        public View getView(int position , View convertView,ViewGroup parent){
            cursor.moveToPosition(position);
            System.out.println(cursor.getString(1));
            if(cursor.getString(1).equals(My)) {
                convertView =inflater.inflate(R.layout.my_message_item, null);
                ((TextView)convertView.findViewById(R.id.text_me)).setText(cursor.getString(3));
                ((ImageView)convertView.findViewById(R.id.img_me)).setImageDrawable(img_userDrawable);
            }else{
                convertView = inflater.inflate(R.layout.friend_message_item, null);
                ((TextView)convertView.findViewById(R.id.text_friend)).setText(cursor.getString(3));
                ((ImageView)convertView.findViewById(R.id.img_friend)).setImageDrawable(img_friendDrawable);
            }
            return convertView;
        }
    }



    //上傳聊天紀錄到sqlite
    public void adddata(int ID ,String FromName , String ToName , String ChatHistory){
        SQLiteDatabase db = sqlite.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put("_id",ID);
        values.put("FromName",FromName);
        values.put("ToName" , ToName);
        values.put("ChatHistory", ChatHistory);
        db.insert("ChatMessage", null, values);
    }

    @Override
    protected void onActivityResult(int requestCode , int resultCode,Intent data){
        if(fileChooser.onActivityResult(requestCode,resultCode,data)){
            filearray = fileChooser.getChosenFiles();
            SendFile(filearray[0].getName(), filearray[0].getAbsolutePath());
            addFileToListview(0, 1);
            listview_chat.setAdapter(myAdapter);
            listview_chat.setSelection(myAdapter.getCount() - 1);
            checkbomb.add(myAdapter.getCount()-1);
            messagecount++;
        }else{
            System.out.println("error");
        }
    }

    //接受文件
    public void getfile(){
        Thread thread  = new Thread(){
            public void run(){
                ServiceDiscoveryManager sdm = ServiceDiscoveryManager.getInstanceFor(connection);
                if (sdm == null) {
                    sdm = new ServiceDiscoveryManager(connection);
                }

                sdm.addFeature("http://jabber.org/protocol/disco#info");
                sdm.addFeature("jabber:iq:privacy");

                // Create the file transfer manager
                final FileTransferManager managerListner = new FileTransferManager(connection);

                FileTransferNegotiator.setServiceEnabled(connection, true);
                Log.i("File transfere manager", "created");
                // Create the listener
                managerListner.addFileTransferListener(new FileTransferListener(){
                    @Override
                    public void fileTransferRequest(final FileTransferRequest request){
                        Log.i("Recieve File",
                                "new file transfere request  new file transfere request   new file transfere request");

                        Log.i("file request",
                                "from" + request.getRequestor());

                        IncomingFileTransfer transfer = request.accept();

                        Log.i("Recieve File  dialog", "accepted");
                        try{
                            transfer.recieveFile(new File("/sdcard/" + request.getFileName()));
                        }catch(XMPPException e){
                            e.printStackTrace();
                        }
                    }
                });
            }
        };
        thread.start();
    }

    //發送文件
    public void SendFile(final String Receiver,final String Directory){
        Thread thread = new Thread(){
            public void run(){
                ServiceDiscoveryManager sdm = ServiceDiscoveryManager.getInstanceFor(connection);
                if(sdm == null){
                    sdm = new ServiceDiscoveryManager(connection);
                }

                sdm.addFeature("http://jabber.org/protocol/disco#info");
                sdm.addFeature("jabber:iq:privacy");

                // Create the file transfer manager
                FileTransferManager manager = new FileTransferManager(
                        connection);
                FileTransferNegotiator.setServiceEnabled(connection, true);

                // Create the outgoing file transfer
                OutgoingFileTransfer transfer = manager
                        .createOutgoingFileTransfer(pre.getFrom());
                Log.i("transfere file", "outgoingfiletransfere is created");

                try{
                    OutgoingFileTransfer.setResponseTimeout(30000);
                    transfer.sendFile(new File(Directory), Receiver);
                    Log.i("transfere file", "sending file");

                    while (!transfer.isDone()) {

                        try {
                            Thread.sleep(1000);
                            Log.i("transfere file", "sending file status "
                                    + transfer.getStatus() + "progress: "
                                    + transfer.getProgress());
                            if (transfer.getStatus() == FileTransfer.Status.error) {
                                transfer.cancel();
                                break;
                            }
                        } catch (InterruptedException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                }catch(XMPPException e){
                    e.printStackTrace();
                }

                Log.i("transfere file", "sending file done");
            }
        };
        thread.start();
    }

}
