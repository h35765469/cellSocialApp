package com.example.user.chatsystem1;

import android.app.AlertDialog;
import android.app.Fragment;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.example.user.chatsystem1.FormatTools.FormatTools;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManager;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.PacketCollector;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.RosterGroup;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.AndFilter;
import org.jivesoftware.smack.filter.PacketFilter;
import org.jivesoftware.smack.filter.PacketTypeFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.provider.ProviderManager;
import org.jivesoftware.smackx.Form;
import org.jivesoftware.smackx.ReportedData;
import org.jivesoftware.smackx.ServiceDiscoveryManager;
import org.jivesoftware.smackx.packet.VCard;
import org.jivesoftware.smackx.search.UserSearch;
import org.jivesoftware.smackx.search.UserSearchManager;

import java.io.ByteArrayInputStream;
import java.text.Format;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;

public class SearchFriendActivity extends AppCompatActivity {
    EditText Search;
    Button SearchButton;
    String queryResult;
    TextView messageview;
    String string = " ";
    String string2 = " ";
    XMPPConnection connection;
    ListView Friendlist;
    Drawable imageicon;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search_friend);
        Search = (EditText)findViewById(R.id.Search);
        SearchButton = (Button)findViewById(R.id.SearchButton);
        //messageview = (TextView)findViewById(R.id.message);
        Friendlist = (ListView)findViewById(R.id.Friendlist);
        SearchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String username = Search.getText().toString();
                String name = Search.getText().toString();
                SearchFriend(username);
            }
        });
        connection = XmppConnection.getConnection();
    }
     //查询用户(
    public void SearchFriend(final String userName){
        String searchtext = Search.getText().toString();
        HashMap<String,Object>user =null;
        List<HashMap<String,Object>>SearchResult = new ArrayList<HashMap<String,Object>>();
        if(searchtext.equals("")){
            Toast.makeText(SearchFriendActivity.this,"輸入訊息不能為空",Toast.LENGTH_SHORT).show();
        }
        else{
                try {
                    XMPPConnection connection = XmppConnection.getConnection();
                    UserSearchManager searchmanager = new UserSearchManager(connection);
                    Form searchform = null;
                    searchform = searchmanager.getSearchForm("search.192.168.0.103");
                    Form answerform = searchform.createAnswerForm();
                    answerform.setAnswer("Username"  , true);
                    answerform.setAnswer("search",userName);
                    ReportedData data = null;
                    data = searchmanager.getSearchResults(answerform, "search.192.168.0.103");
                    if(data != null && data.getRows()!=null){
                        Iterator<ReportedData.Row> it = data.getRows();
                        ReportedData.Row row = null;
                        String ans = " ";
                        while(it.hasNext()){
                            row = it.next();
                            user = new HashMap<String,Object>();
                            imageicon = getUserImage(row.getValues("Username").next().toString());
                            user.put("Username", row.getValues("Username").next().toString());
                            user.put("ImageIcon", imageicon);
                            SearchResult.add(user);
                        }
                    }else{
                        System.out.println("輕鬆自在");
                    }
                }catch(XMPPException e){
                    e.printStackTrace();
                }


                //獲取朋友資訊 , 包括頭貼(可用)
                SimpleAdapter listItemAadpter = new SimpleAdapter(this,SearchResult,R.layout.friendlist,new String[]{"Username","ImageIcon"} , new int[]{R.id.title , R.id.image2} );
                Friendlist.setAdapter(listItemAadpter);

                //SimpleAdapter只能為控制元件搭配drawable目錄下的圖片即R.drawable.xx
                //為了獲取我們從服務器Drawable類型圖片 , 必須使用ViewBinder
                listItemAadpter.setViewBinder(new SimpleAdapter.ViewBinder() {
                    @Override
                    public boolean setViewValue(View view, Object data, String textRepresentation) {
                        if(view instanceof ImageView && data instanceof  Drawable){
                            ImageView iv = (ImageView)view;
                            iv.setImageDrawable((Drawable)data);
                            return true;
                        }
                        return false;
                    }
                });

                Friendlist.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    public void onItemClick(AdapterView<?> parent, View view,
                                            int position, long id) {
                        HashMap<String, String> map = (HashMap<String, String>) Friendlist.getItemAtPosition(position);
                        final String name = map.get("Username");
                        final String name2 = name + "@" + connection.getServiceName();
                        AlertDialog.Builder dialog = new AlertDialog.Builder(SearchFriendActivity.this);
                        dialog.setTitle("添加好友")
                                .setIcon(R.mipmap.ic_launcher)
                                .setMessage("要將[" + userName + "]加為好友?")
                                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        //添加好友
                                        addUser(name2, name);
                                        Presence subscription = new Presence(Presence.Type.subscribe);
                                        subscription.setTo(name);
                                        dialog.cancel();
                                        finish();
                                        Bundle bundle = getIntent().getExtras();
                                        Intent intent = new Intent();
                                        intent.setClass(SearchFriendActivity.this, FriendListActivity.class);
                                        intent.putExtras(bundle);
                                        startActivity(intent);
                                    }
                                })
                                .setNegativeButton("NO", new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.cancel();
                                    }
                                }).create().show();
                    }
                });

        }


    }

    public void addUser(String username , String name){
        XMPPConnection connection =  XmppConnection.getConnection();
        Roster roster = connection.getRoster();
        try {
            roster.createEntry(username, name, new String[]{"Friend"});
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    //獲取用戶頭像
    public static Drawable getUserImage(String user){
        ByteArrayInputStream bais = null;
        XMPPConnection connection = XmppConnection.getConnection();
        try{
            VCard vcard = new VCard();
            ProviderManager.getInstance().addIQProvider("vCard", "vcard-temp", new org.jivesoftware.smackx.provider.VCardProvider());
            if (user == "" || user == null || user.trim().length() <= 0) {
                return null;
            }
            vcard.load(connection,user+"@"+connection.getServiceName());
            if(vcard == null || vcard.getAvatar() == null)
                return null;
            bais = new ByteArrayInputStream(vcard.getAvatar());
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }
        return FormatTools.getInstance().InputStreamToDrawable(bais);



    }

}

